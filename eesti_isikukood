from random import randrange
#Lahendus põhineb http://et.wikipedia.org/wiki/Isikukood lehel kirjeldatud algoritmil

#Genereerida suvaline sugu aastate vahemikus 1800 - 2199
sugu = str(randrange(1,9))

#Genereerida suvaline sünniaasta vahemikus 0 - 99
synniaasta = str(randrange(0,100)).zfill(2)

#Genereerida suvaline synnikuu vahemikus 1-12
synnikuu = str(randrange(1,13)).zfill(2)

#Genereerida suvaline synnikuupäev vahemikus 1-28 (väldib liigaastal tekkivat kuupäeva)
synnikuupaev = str(randrange(1,29)).zfill(2)

#Genereerid suvalise järjekorranumbri vahemikus 0 - 999
jrk_nr = str(randrange(0,1000)).zfill(3)

#Paneb seni leitud isikukoodi kokku
poolik_isikukood = sugu + synniaasta + synnikuu + synnikuupaev + jrk_nr

#Genereerib seni leitud isikukoodile kontrollnumbri wiki lehel kirjeldatud algoritmi põhjal
def genereeri_kontrollnr(poolik_isikukood):

    esimese_astme_kaal = "1234567891"
    teise_astme_kaal = "3456789123"
    kontroll_nr = 0

    #Kasutatakse eeldust, et seni leitud isikukood sisaldab sama palju numbreid kui astme kaalud
    for i in range(10):
        kontroll_nr += int(poolik_isikukood[i]) * int(esimese_astme_kaal[i])
    else:
        if kontroll_nr % 11 != 10:
            return kontroll_nr % 11
        #Kui esimese astmega kontrollnumbrit ei leitud, siis üritatakse teise astme kaaluga
        else:
            kontroll_nr = 0
            for j in range(10):
                kontroll_nr += int(poolik_isikukood[j]) * int(teise_astme_kaal[j])
            else:
                if kontroll_nr % 11 != 10:
                    return kontroll_nr % 11
                else:
                    return 0

print (poolik_isikukood,genereeri_kontrollnr(poolik_isikukood), sep='')







